import "std/Prelude.oj"
import "std/Control.oj"
import "std/Read.oj"
import "std/State.oj"

class IntExpr(int)
class AddExpr(lhs, rhs)
class MulExpr(lhs, rhs)
class IdentExpr(name)
class LambdaExpr(name, expr)
class ApplyExpr(fn, arg)

class Env(get)

def emptyEnv
    Env((name) do "undefined " + name)

def Env.insert(name, value)
    Env((n) if (n == name) { value }.else { this.get(n) })

def Any.eval(env) match (this) {
    IntExpr(int) int
    AddExpr(lhs, rhs) lhs.eval(env) + rhs.eval(env)
    MulExpr(lhs, rhs) lhs.eval(env) * rhs.eval(env)
    IdentExpr(name) env.get(name)
    LambdaExpr(name, expr) (arg) expr.eval(env.insert(name, arg))
    ApplyExpr(fn, arg) fn.eval(env)(arg.eval(env))
}

def Any.evalRoot() this.eval(emptyEnv)

def IntExpr.toString() this.int.toString()
def AddExpr.toString() "(" + this.lhs.toString() + " + " + this.rhs.toString() + ")"
def MulExpr.toString() "(" + this.lhs.toString() + " * " + this.rhs.toString() + ")"
def IdentExpr.toString() this.name
def LambdaExpr.toString() "(Î»" + this.name + " " + this.expr.toString() + ")"
def ApplyExpr.toString() "(" + this.fn.toString() + " " + this.arg.toString() + ")"

def ifEnd(lazy then, lazy f)
    if (hasNext().not()) { then() }.else { f() }

def skipIgnored()
    while (hasNext() && peek() == ' ') {
        next()
    }

def charIsInt(c)
    c >= '0' && c <= '9'

def charToInt(c)
    c.toInt() - '0'.toInt()

def parseIntExpr()
    mutable (0) {
        while (hasNext() && charIsInt(peek())) {
            let char peek()
            next()
            modify((sum) sum * 10 + charToInt(char))
        }
        IntExpr(get())
    }

def parseParens() {
    let expr parseAddExpr()
    if (peek == ')') {
        do "Expected ')'"
    }.else {
        next()
        expr
    }
}

def charIsIdent(c)
    c >= 'a' && c <= 'z'

def parseIdentExpr()
    mutable ("") {
        while (hasNext() && charIsIdent(peek())) {
            let char peek()
            next()
            modify((ident) ident + char.toString())
        }
        IdentExpr(get())
    }

def parseLambdaExpr() {
    let ident parseIdentExpr()
    skipIgnored()
    LambdaExpr(ident.name, parseAddExpr())
}

def parseAtomicExpr() {
    skipIgnored()
    ifEnd (do "Unexpected end of reader") {
        if (peek() == '(') {
            next()
            parseParens()
        }.elif (peek() == '\\') {
            next()
            parseLambdaExpr()
        }.elif (charIsInt(peek())) {
            parseIntExpr()
        }.elif (charIsIdent(peek())) {
            parseIdentExpr()
        }.else {
            do "Unexpected character '" + peek().toString() + "'"
        }
    }
}

def parseApplyTrail(expr) {
    skipIgnored()
    ifEnd (expr) {
        if (peek() == ')') {
            next()
            expr
        }.else {
            parseApplyTrail(ApplyExpr(expr, parseAtomicExpr()))
        }
    }
}

def parseApplyExpr() {
    let expr parseAtomicExpr()
    skipIgnored()
    ifEnd (expr) {
        if (peek() == '(') {
            next()
            parseApplyTrail()
        }.else { expr }
    }
}

def parseMulExpr() {
    let expr parseApplyExpr()
    skipIgnored()
    ifEnd (expr) {
        if (peek() == "*") {
            next()
            MulExpr(expr, parseMulExpr())
        }.else { expr }
    }
}

def parseAddExpr() {
    let expr parseMulExpr()
    skipIgnored()
    ifEnd (expr) {
        if (peek() == "+") {
            next()
            AddExpr(expr, parseAddExpr())
        }.else { expr }
    }
}

def eval(string)
    readString(string, 0, parseAddExpr()).evalRoot()
