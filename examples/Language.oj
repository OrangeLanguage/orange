import "std/Prelude.oj"
import "std/Read.oj"

class IntExpr(int)
class AddExpr(lhs, rhs)
class MulExpr(lhs, rhs)
class IdentExpr(name)
class LambdaExpr(name, expr)
class ApplyExpr(fn, arg)

class Env(get)

def Env.insert(name, value)
    Env((n) {n == name}.if(value, this.get(n)))

def Any.eval(env) match (this) {
    IntExpr(int) int
    AddExpr(lhs, rhs) lhs.eval(env) + rhs.eval(env)
    MulExpr(lhs, rhs) lhs.eval(env) * rhs.eval(env)
    IdentExpr(name) env.get(name)
    LambdaExpr(name, expr) (arg) expr.eval(env.insert(name, arg))
    ApplyExpr(fn, arg) fn.eval(env)(arg.eval(env))
}

def Any.evalRoot() this.eval(Env((name) do {"undefined " + name}))

def IntExpr.toString() this.int.toString()
def AddExpr.toString() "(" + this.lhs.toString() + " + " + this.rhs.toString() + ")"
def MulExpr.toString() "(" + this.lhs.toString() + " * " + this.rhs.toString() + ")"
def IdentExpr.toString() this.name
def LambdaExpr.toString() "(Î»" + this.name + " " + this.expr.toString() + ")"
def ApplyExpr.toString() "(" + this.fn.toString() + " " + this.arg.toString() + ")"

def charToInt(c)
    c.toInt() - '0'.toInt()

def charIsInt(c)
    c >= '0' && c <= '9'

def ifHasNext(lazy then, lazy f)
    {hasNext().not()}.if(then(), f())

def skipIgnored()
    {hasNext() && peek() == ' '}.if({
        next()
        skipIgnored()
    }, {})

def parseIntExpr() {
    def go(sum) 
        {hasNext() && charIsInt(peek())}.if({
            let char peek()
            next()
            go(sum * 10 + charToInt(char))
        }, sum)
    IntExpr(go(0))
}

def parseParens() {
    let expr parseAddExpr();
    {peek() != ')'}.if(do "Expected ')'") {
        next()
        expr
    }
}

def charIsIdent(c)
    c >= 'a' && c <= 'z'

def parseIdentExpr() {
    def go(ident) 
        {hasNext() && charIsIdent(peek())}.if({
            let char peek()
            next()
            go(ident + char.toString())
        }, ident)
    IdentExpr(go(""))
}

def parseLambdaExpr() {
    let ident parseIdentExpr()
    skipIgnored()
    LambdaExpr(ident.name, parseAddExpr())
}

def parseAtomicExpr() {
    skipIgnored()
    ifHasNext(do "Unexpected end of reader") {
        {peek() == '('}.if({ next() parseParens() }) {
            {peek() == '\\'}.if({ next() parseLambdaExpr() }) {
                {charIsInt(peek())}.if(parseIntExpr()) {
                    {charIsIdent(peek())}.if(parseIdentExpr()) {
                        do {"Unexpected character '" + peek().toString() + "'"}
                    }
                }
            }
        }
    }
}

def parseApplyTrail(expr) {
    skipIgnored()
    ifHasNext(expr) {
        {peek() == ')'}.if({ 
            next()
            expr
        }, parseApplyTrail(ApplyExpr(expr, parseAtomicExpr())))
    }
}

def parseApplyExpr() {
    let expr parseAtomicExpr()
    skipIgnored()
    ifHasNext(expr) {
        {peek() == '('}.if({
            next()
            parseApplyTrail(expr)
        }, expr)
    }
}

def parseMulExpr() {
    let expr parseApplyExpr()
    skipIgnored()
    ifHasNext(expr) {
        {peek() == '*'}.if({
            next()
            MulExpr(expr, parseMulExpr())
        }, expr)
    }
}

def parseAddExpr() {
    let expr parseMulExpr()
    skipIgnored()
    ifHasNext(expr) {
        {peek() == '+'}.if({
            next()
            AddExpr(expr, parseAddExpr())
        }, expr)
    }
}

def eval(string)
    readString(string, 0, parseAddExpr()).evalRoot()
