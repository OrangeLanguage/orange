class Nil()
def nil Nil()

class Cons(car, cdr)

infix right 5 : Cons

def listToString(list) match (list) {
    Nil() "nil"
    Cons(car, cdr) car.toString() + " : " + listToString(cdr)
}

def Nil.toString() listToString(this)
def Cons.toString() listToString(this)

def count(i) {
    def go(i, acc) 
        {i == 0}.if(acc, go(i - 1, i : acc))
    go(i, nil)
}

def for(list, f) match (list) {
    Nil() {}
    Cons(car, cdr) {
        f(car)
        for(cdr, f)
    }
}

def Any.map(f) match (this) {
    Nil() nil
    Cons(car, cdr) f(car) : map(cdr, f)
}

def Any.fold(acc, f) match (this) {
    Nil() acc
    Cons(car, cdr) fold(cdr, f(car, acc), f)
}

def Any.filter(f) match (this) {
    Nil() nil
    Cons(car, cdr) f(car).if(
        car : filter(cdr, f),
        filter(cdr, f)
    )
}
